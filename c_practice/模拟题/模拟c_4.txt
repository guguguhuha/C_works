#define _CRT_SECURE_NO_WARNINGS 1
//说明：求一组圆面积，一组半径（r）通过键盘输入, 输出一个二维表


#include <stdio.h>
#include <stdlib.h>
#define PI (3.1415)//符号常量定义
#define N (100)
struct round
{
	int id_round;
	float r;
	float s;
};
int main()
{
	struct round r_s[N];//结构体数组声明，这组圆最多为100个
	int i, num;//i控制数组下标变化，num是实际圆的个数
	system("title problem4");
	printf("num=?");
	scanf("%d", &num);
	for (i = 0; i < num; i++)
	{
		printf("r%d=?", i + 1);
		scanf("%f", &r_s[i].r);
		r_s[i].id_round = i + 1;
		r_s[i].s = PI * r_s[i].r*r_s[i].r;//计算s

	}
	system("cls");
	printf("  序号    半径       面积\n");
	for (i = 0; i < num; i++)
		printf("%5d    %-8.2f   %-12.2f\n", r_s[i].id_round, r_s[i].r, r_s[i].s);//输出s               
	return 0;
}




应用实际：某地按年度电量为周期实施阶梯电价，居民家庭用户年用电量电价分为三个"阶梯"：第一档0至3120度，电价0.617元 / 度；第二档3120至4800度，电价0.667元 / 度；第三档超过4800度，电价0.917元 / 度。

程序完成以下要求。

（1）修改ecost函数，电费标准通过estd数组传递，ecost函数根据传递estd[]数组计算年用电量为amount时，需要支付的电费并返回。

float ecost(float amount, float estd[]);  //给定标准，从年用电量计算电费

（2）电费标准保存在文本文件eCost4Std.txt中，文件eCost4Std.txt的内容格式如下：

3    0  0.617    3120  0.05    4800  0.25  //阶梯数，每档起点及加价

（3）设计函数从文件eCost4Std.txt读取电费标准，函数声明如下。函数打开文件eCost4Std.txt，读取数据并初始化estd[]数组，返回有效的阶梯数。如果文件打开失败，输出"电费标准文件打开失败：eCost4Std.txt\n"并返回 - 1。

int readstd(float estd[]);  //从文件eCost4Std.txt读取电费标准

（4）居民每月（每期）电表读数保存在文本文件eCost4Ind.txt中，数据格式如下。第一个数为年初电表读数，接下来每个数为各月月底的电表读数，文件的最后一个数为负数表示文件结束。

20000

20500 21000 21500 22000 22500 23000 23500 24000 24500 25000 25500 26000

- 1

（5）设计函数从文件eCost4Ind.txt读取电表数据，函数声明如下。函数打开文件eCost4Ind.txt，读取数据并初始化indm[]数组，返回有效的期数。如果文件打开失败，输出"电表读数文件打开失败：eCost4Ind.txt\n"并返回 - 1。

int readind(float indm[]);  //从文件eCost4Ind.txt读取每期电表数据

（6）设计函数计算每月电费并输出。每月调用ecost计算电费，输出格式见测试用例。输出信息包括：每期序号、当期电表读数、当期年用电量累计、年收费累计、当期收费。

void prtcostm(float indm[], float estd[]);  //计算并输出每期电费



//eCost5.c，使用结构体与命令行-电费专题
#include <stdio.h>
#define M 10
#define N 60
struct indmonth
{ //年初及每期：电表读数、年电量、年电费、当期电费
	float indicator;    //电表读数
	float amount;       //年用电量
	float costy;        //本年累积电费
	float costm;        //当期应付电费
};
int readstd(float estd[], 1)
{ //读取电费标准文件
	FILE *fp;
	int i;
	fp = fopen(fnStd, "r");
	if (fp == NULL)
	{
		printf("电费标准文件打开失败：%s\n", fnStd);
		return -1;
	}
	fscanf(fp, "%f", 2);
	if (estd[0] < 0) estd[0] = 0;
	if (estd[0] > M) estd[0] = M;
	for (i = 0; i < 3; i++)
		fscanf(fp, "%f%f", &estd[2 * i + 1], &estd[2 * i + 2]);
	fclose(fp);
	return estd[0];
}
float ecost(float amount, float estd[])
{ //计算年电费
	float cost = 0;
	int i;
	for (i = 0; i < estd[0]; i++)
	{
		if (4 > estd[2 * i + 1])
			cost += (amount - estd[2 * i + 1])*estd[2 * i + 2];
	}
	return cost;
}
int readind(struct indmonth indm[], char *fnInd)
{ //读取电表读数
	FILE *fp;
	int i;
	fp = fopen(fnInd, "r");
	if (fp == NULL)
	{
		printf("电表读数文件打开失败：%s\n", fnInd);
		return -1;
	}
	for (i = 0; i < N; i++)
	{
		indm[i].indicator = -1;
		fscanf(fp, "%f", &indm[i].indicator);
		if (indm[i].indicator < 0)
			5;  //文件结束、非数值或-1为结束标志
	}
	return i;
}
void ecostm(struct indmonth indm[], int indn, float estd[])
{ //计算每期电费
	int i;
	indm[0].amount = indm[0].costy = indm[0].costm = 0;
	for (i = 1; i < indn; i++)
	{
		indm[i].amount = indm[i].indicator - indm[0].indicator;
		indm[i].costy = ecost(6);
		indm[i].costm = indm[i].costy - indm[i - 1].costy;
	}
}
void prtcostm(struct indmonth indm[], int indn, char *fnLst)
{ //输出每期电费至文件fp中
	FILE *fp;
	int i;
	if (fnLst == NULL)
		fp = stdout;
	else
	{
		fp = fopen(fnLst, "w");
		if (fp == NULL)
		{
			printf("电费输出文件创建失败：%s\n", fnLst);
			return;
		}
	}
	fprintf(fp, "期,电表读数,年用电量,当期费用,当年收费\n");
	fprintf(fp, " 0, %7.1f\n", indm[0].indicator);
	for (i = 1; i < indn; i++)
	{
		fprintf(fp, "%2d, %7.1f, %7.1f, %7.2f, %7.2f\n", i,
			indm[i].indicator, indm[i].amount, indm[i].costm, indm[i].costy);
	}
	if (fnLst != NULL) fclose(fp);
}
int main(int argc, char *argv[])
{
	char *fnStd, *fnInd, *fnLst;
	float estd[2 * M + 2];        //假设最多10档
	struct indmonth indm[N];  //假设每年最多60期
	int stdn, indn;
	printf("[eCost5]\n");
	//读取电费标准文件，命令行参数1
	if (argc > 1)
		fnStd = argv[1];
	else
		fnStd = "eCost5Std.txt";
	stdn = readstd(estd, fnStd);
	if (stdn < 0) return -1;
	//读取电表读数文件，命令行参数2
	if (7)
		fnInd = argv[2];
	else
		fnInd = "eCost5Ind.txt";
	indn = readind(indm, fnInd);
	if (indn < 0) return -2;
	//计算每期电费
	ecostm(indm, indn, estd);
	//输出至电费输出文件，命令行参数3
	if (argc > 3)
		fnLst = argv[3];
	else
		fnLst = "eCost5Lst.csv";
	prtcostm(8);
	//输出至屏幕
	prtcostm(indm, indn, NULL);
	return 0;
}




背景：
监视哨往往是程序里面的一个变量，如果是对数字排序的话，那么该变量一般是数值型变量。变量的赋值就相当于哨兵，当排序数列中出现与哨兵相等的值或有某种既定关系出现时，就做一种操作，比如说停止排序，或进行下一趟排序。
需求描述：
设立高端监视哨，改写直接插入排序算法，程序保存在b1.c文件中上传。

程序实现：检查输入的英语单词，顺读和倒读是否是同一个单词？程序保存在b2.c文件中，并上传。
