(     )不能创建一个字典的语句.

 

 dict = {[4,5,6]:'dictionary'} dict = {} dict = {(4,5,6):'dictionary'} dict= {4：6}
下面代码的输出结果是:

print( 0.1 + 0.2 == 0.3)

 

 False 0 -1 True
下列代码运行后，会输出"common letter"(      )次。

s1 = "mit u rock"

s2 = "i rule mit"

if len(s1) == len(s2):

    for char1 in s1:

        for char2 in s2:

            if char1 == char2:

                print("common letter")

                break

 

 

 0 8 10 7
单选题 / 4
若 a = 'abca' ，若想将 a 变为 'ebca' ，则下列语句正确的是( ).

 a = 'e' + a[1:] a.replace('a', 'e') a[1] = 'e' a[0] = 'e'
关于a and b的描述错误的是（ ）。

 若a=True b=False 则 a and b ==True 若a=False b=False 则 a and b ==False 若a=True b=True 则 a and b ==True 若a= False b=True 则 a and b ==False
下面代码的输出结果是‪‪‪‪‪‪‫‪‪‪‪‪‪‫‪‪‪‪‪‫‪‪‪‪‪‫‪‪‪‪‪‪‫‪‪‪‪‪‪‫（）

s =["seashell","gold","pink","brown","purple","tomato"]

  print(s[4:])

 

 ['purple'] ['purple', 'tomato'] ['seashell', 'gold', 'pink', 'brown'] ['gold', 'pink', 'brown', 'purple', 'tomato']
Python 中对变量描述错误的选项是(    ).

 

 变量 PI 与变量 Pi 被看作相同的变量 变量必须在创建和赋值后使用 Python不需要显式声明变量类型,在第一次变量赋值时由值决定变量的类型 变量通过变量名访问
以下代码输出结果为：

s = "6.00 is 6.0001 and 6.0002"

new_str = ""

new_str += s[-1]

new_str += s[0]

new_str += s[4::30]    

new_str += s[13:10:-1]

print(new_str)

 

 

 6.00 is 6.0001 and 6.0002 26100 260000 26 100
str="abcdefg"

则 str[2:4] 的内容是（）

 

 cd cde bcd bc
a=int(input()) #输入3

a**=2

print(A+2)

代码运行结果为:(     ).

 

 11 8 5 报错NameError: name 'A' is not defined
执行下面操作后，list2的值是：

list1 = ['a', 'b', 'c']

list2 = list1

list1.append('de')

 ['a', 'b', 'c', 'de'] ['a', 'b', 'c'] ['d', 'e', 'a', 'b', 'c'] ['a', 'b', 'c', 'd', 'e']
给定字典d，(    )对d.items()的描述是正确的.

 

 返回一种dict_items类型，包括字典d中所有键值对 返回一个列表类型，每个元素是一个二元元组，包括字典d中所有键值对 返回一个元组类型，每个元素是一个二元元组，包括字典d中所有键值对 返回一个集合类型，每个元素是一个二元元组，包括字典d中所有键值对
已知

aList = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17]

则

aList[1::2]的结果为：

 [3, 4] [3, 4, 5, 6, 7] [4, 6, 9, 13, 17] [3,6,11,17]
获得字符串s长度的方法是(    ).

 

 length(s) len(s) s.len() s.length
列 for 语句中，在 in 后使用不正确的是：

for var in ( ):

    print（var）

 range(0, 10, 5) [1, 2, 3, 4, 5] (1) set('str')
for或者while与else搭配使用时，关于执行else语句块描述正确的是 ‫()‪‪‪‪‪‪‫‪‪‪‪‪‪‫‪‪‪‪‪‫‪‪‪‪‪‫‪‪‪‪‪‪‫‪‪‪‪‪‪

 

 仅循环正常结束后执行 仅循环非正常结束后执行（以break结束） 永不执行 总会执行
下面（ ）不是有效的变量名。

 Numbr banana my-score _demo
关于Python的lambda函数，(     )描述是错误的。

 

 lambda函数将函数名作为函数结果返回 lambda用于定义简单的、能够在一行内表示的函数 f = lambda x,y:x+y 执行后，f的类型为数字类型 可以使用lambda函数定义列表的排序原则
功能说明：设计一个加法计算器程序。将操作数填入输入框后，单击“加法”按钮将算式和结果填入下方的结果文本框中。单击“清空”则将清空输入框和结果文本框。请在空白处填入相应的代码，使程序功能完整。

a2.jpg

代码如下：

from tkinter import *

def run():

    a= t1.get()

    b=           （1）             (t2.get())

    c=float(a)+b

    d='%s+%s=%s\n'%(a,b,c)

    txt.insert(END,d)

 

def clear():

    t1.delete(0,END)

    t2.delete(0,END)

    txt.delete(0.0,END)

 

root=        （2）                     

root.title('加法')

root.geometry('320x240')

t1=Entry(root)

t1.place(relx=0.1,rely=0.05,relwidth=0.2,relheight=0.1)

t2=Entry(root)

t2.place(relx=0.5,rely=0.05,relwidth=0.2,relheight=0.1)

cmd1=Button(root,text='加法',            （3）             )####      

cmd1.place(relx=0.1,rely=0.3,relwidth=0.2,relheight=0.1)

cmd2=Button(root,text='清空',command=clear)

cmd2.place(relx=0.5,rely=0.3,relwidth=0.2,relheight=0.1)

txt=Text(root)

txt.place(relx=0.1,rely=0.6,relwidth=0.6,relheight=0.3)

              （4）               
输入一个字符串作为密码，密码只能由数字与字母组成。编写程序判断输入的密码的强度，并输出。

判断标准为：满足其中一条，密码强度增加一级。

1）有数字

2）有大写字母

3） 有小写字母

4）位数不少于8位

填空完成以下程序：

def judge(password):

    result=0

    n=                 （1）                 

    if n>=8:

        result+=1

    for i in range(n):

        if '0'<=password[i]<='9':

            result+=1

            break

    for i in range(n):

        if 'A'<=password[i]<='Z':

            result+=1

            break

    for i in range(n):

        if 'a'<=password[i]<='z':

            result+=1

            break

            （2）        result

 

 

def main():

    """

        主函数

    """

    while True:

        password = input('请输入密码(直接回车为退出)：')

        if password=='':

                       （3）                  

        s=judge(        （4）              )

        print("%s的密码强度为%d级"%(password,s))

 

    

if __name__ == '__main__':

    main()
程序的功能： 输入1～9间的整数作为行数n，打印如图所示的n行回文数字字符图形。运行界面如下：

a1.jpg

代码如下：

s = input('输入行数（1-9）:')

#(1)此处打印行数

           （1）         

line = int(s)

for i in range(1,line+1):

    space = ' ' * (line-i)     #此句单引号中有一个空格

    print(space, end = '')

    #(2)此处用循环打印前一半数字串

                    （2）               

        print(str(j), end = '')

    for j in range(i-1,0,-1):

        #(3)此处在循环体中打印后一半数字串

              （3）               

    print()


